from sklearn.linear_model import LinearRegression

X = df[["market"]]
y = df["sales"]
reg = LinearRegression()
model = reg.fit(X, y)
model.intercept_
model.coef_ #b1 katsayisi

model.score(X,y) #rkare degeri

model.predict(X)[0:10] #ilk 10 degeri tahmin et

7.03 + 30*0.04 #manuel hesaplama

X = df[["market"]]
y = df["sales"]
reg = LinearRegression()
model = reg.fit(X, y)


model.predict([[30]])

yeni_veri = [[5],[90],[200]]

model.predict(yeni_veri)

from sklearn.metrics import mean_squared_error, r2_score

lm = smf.ols("sales ~ market", df)
model = lm.fit()

mse = mean_squared_error(y, model.fittedvalues)

mse

import numpy as np
rmse = np.sqrt(mse)

rmse

reg.predict(X)[0:10]

y[0:10]

k_t = pd.DataFrame({"gercek_y": y[0:10],
                   "tahmin_y": reg.predict(X)[0:10]})
#karsilastirma tablosu yaptik


k_t

k_t["hata"] = k_t["gercek_y"] - k_t["tahmin_y"]


k_t


k_t["hata_kare"] = k_t["hata"]**2

k_t

np.sum(k_t["hata_kare"]) #toplam hata


np.mean(k_t["hata_kare"]) #hata kareler ortalamasi

np.sqrt(np.mean(k_t["hata_kare"])) #hata kareler ortalamasinin karekoku

model.resid[0:10] #artiklar

plt.plot(model.resid) #artiklarin gorsellestirmesi

import pandas as pd
ad = pd.read_csv("Data.csv", usecols = [1,2,3,4])
df = ad.copy()
df.head()


from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict

X = df.drop("sales", axis = 1)
y = df["sales"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state= 42) #random state her denemede farklÄ± degerler olmasin diye



X_train.shape


y_train.shape


X_test.shape

y_test.shape


training = df.copy()

training.shape

lm = sm.OLS(y_train, X_train)

model = lm.fit()
model.summary()


model.summary().tables[1]

lm = LinearRegression()
model = lm.fit(X_train, y_train)

model.intercept_ #sabit katsayi

model.coef_ #bagimsiz degiskenlerin katsayilari

yeni_veri = [[30], [10],[40]]
yeni_veri = pd.DataFrame(yeni_veri).T

model.predict(yeni_veri)

rmse = np.sqrt(mean_squared_error(y_train, model.predict(X_train)))

rmse #egitim hatasi

rmse = np.sqrt(mean_squared_error(y_test, model.predict(X_test)))


rmse

X = df.drop('sales', axis=1)
y = df["sales"]
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                                                    test_size=0.20, 
                                                    random_state=144)
lm = LinearRegression() 
model = lm.fit(X_train, y_train)

np.sqrt(mean_squared_error(y_train, model.predict(X_train)))

np.sqrt(mean_squared_error(y_test, model.predict(X_test)))

model.score(X_train, y_train)

cross_val_score(model, X_train, y_train, cv = 10, scoring = "r2").mean()

np.sqrt(-cross_val_score(model, 
                X_train, 
                y_train, 
                cv = 10, 
                scoring = "neg_mean_squared_error")).mean()
                
 np.sqrt(-cross_val_score(model, 
                X_test, 
                y_test, 
                cv = 10, 
                scoring = "neg_mean_squared_error")).mean()
