import numpy as np
import pandas as pd 
from sklearn.model_selection import train_test_split, GridSearchCV,cross_val_score
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
from sklearn.preprocessing import scale 
from sklearn import model_selection
from sklearn.tree import DecisionTreeRegressor, DecisionTreeClassifier
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import BaggingRegressor

from warnings import filterwarnings
filterwarnings('ignore')


salesf = pd.read_csv("Data.csv")
df = salesf.copy()
df = df.dropna()
y = df["sales"]
X = df.drop('sales', axis=1)
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                                                    test_size=0.25, 
                                                    random_state=42)
df.columns = ["".join (c if c.isalnum() else "_" for c in str(x)) for x in df.columns]


knn_model = KNeighborsRegressor().fit(X_train, y_train)

knn_model

knn_model.n_neighbors

knn_model.effective_metric_

y_pred = knn_model.predict(X_test)

np.sqrt(mean_squared_error(y_test, y_pred))

RMSE = [] 

for k in range(10):
    k = k+1
    knn_model = KNeighborsRegressor(n_neighbors = k).fit(X_train, y_train)
    y_pred = knn_model.predict(X_train) 
    rmse = np.sqrt(mean_squared_error(y_train,y_pred)) 
    RMSE.append(rmse) 
    print("k =" , k , "için RMSE değeri: ", rmse)
    
from sklearn.model_selection import GridSearchCV

knn_params = {'n_neighbors': np.arange(1,30,1)}

knn = KNeighborsRegressor()

knn_cv_model = GridSearchCV(knn, knn_params, cv = 10)

knn_cv_model.fit(X_train, y_train)

knn_cv_model.best_params_["n_neighbors"]

RMSE = [] 
RMSE_CV = []
for k in range(10):
    k = k+1
    knn_model = KNeighborsRegressor(n_neighbors = k).fit(X_train, y_train)
    y_pred = knn_model.predict(X_train) 
    rmse = np.sqrt(mean_squared_error(y_train,y_pred)) 
    rmse_cv = np.sqrt(-1*cross_val_score(knn_model, X_train, y_train, cv=10, 
                                         scoring = "neg_mean_squared_error").mean())
    RMSE.append(rmse) 
    RMSE_CV.append(rmse_cv)
    print("k =" , k , "için RMSE değeri: ", rmse, "RMSE_CV değeri: ", rmse_cv )
    
knn_tuned = KNeighborsRegressor(n_neighbors = knn_cv_model.best_params_["n_neighbors"])

knn_tuned.fit(X_train, y_train)

np.sqrt(mean_squared_error(y_test, knn_tuned.predict(X_test))) 


